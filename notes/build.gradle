buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'

repositories {
    mavenCentral()
}

import java.nio.file.Files
import java.security.SecureRandom
import java.util.stream.Collectors
import java.util.stream.Stream

import static java.util.stream.IntStream.rangeClosed

task generateDictionary {
    doLast {
        int total = 20000
        Random random = new SecureRandom()

        List<String> javaKeywords = Arrays.asList("do", "if", "for", "int", "new", "try", "byte", "case", "char", "else", "goto",
                "long", "this", "void", "break", "catch", "class", "const", "final", "float", "short", "super", "throw", "while",
                "double", "import", "native", "public", "return", "static", "switch", "throws", "boolean", "default", "extends",
                "finally", "package", "private", "abstract", "continue", "strictfp", "volatile", "interface", "protected",
                "transient", "implements", "instanceof", "synchronized")
        Collections.shuffle(javaKeywords, random)

        List<String> arabic = Stream.of(rangeClosed(0x0610, 0x061A), rangeClosed(0x064B, 0x065F), rangeClosed(0x06D6, 0x06DC), rangeClosed(0x06DF, 0x06E8))
                .flatMap { stream -> stream.mapToObj { b -> Character.toString((char) b) } }
                .collect(Collectors.toList())

        int size = arabic.size()
        char prefix = (char) ((int) 'a' + (173 % 26))

        List<String> dictionary = new ArrayList<>(total)
        for (int i = 0; i <= total; i++) {
            int value = i
            StringBuilder builder = new StringBuilder()
            while ({
                int remainder = value % size
                builder.append(arabic.get(remainder))
                value = value / size
                value > 0
            }())
                continue
            dictionary.add(builder.append(prefix).reverse().toString())
        }
        Collections.shuffle(dictionary)

        StringBuilder builder = new StringBuilder()
        javaKeywords.forEach { s -> builder.append(s).append('\n') }
        dictionary.forEach { s -> builder.append(s).append('\n') }

        Files.write(new File("$projectDir/proguard-dictionary.txt").toPath(), builder.toString().getBytes("UTF-8"))
    }
}

extractProguardFiles.dependsOn generateDictionary

android {

    lintOptions {
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "noteseed_${variant.versionName}_${variant.versionCode}.apk"
        }
    }

    def versionPropsFile = file('version.properties')

    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))

        def code = versionProps['VERSION_CODE'].toInteger() + 1

        versionProps['VERSION_CODE'] = code.toString()
        versionProps.store(versionPropsFile.newWriter(), null)

        defaultConfig {
            applicationId "com.f0x1d.notes"
            minSdkVersion 21
            targetSdkVersion 28
            versionCode code
            versionName "6.4.3"

            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        }
    } else {
        throw new GradleException("Could not read version.properties!")
    }

    compileSdkVersion 28
    buildToolsVersion "28.0.3"

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

configurations {
    all*.exclude group: 'com.google.guava', module: 'listenablefuture'
}

dependencies {

    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation "androidx.core:core:1.2.0-alpha02"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation "androidx.appcompat:appcompat:1.1.0-beta01"
    implementation "androidx.annotation:annotation:1.1.0"
    implementation 'com.android.support:preference-v7:28.0.0'
    implementation 'com.mattprecious.swirl:swirl:1.2.0'

    implementation "com.google.android.material:material:1.1.0-alpha07"
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.android.support:support-v4:28.0.0'

    implementation "android.arch.persistence.room:runtime:1.1.1"
    annotationProcessor "android.arch.persistence.room:compiler:1.1.1"

    implementation 'com.jaredrummler:colorpicker:1.0.5'

    implementation 'com.github.bumptech.glide:glide:4.9.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.9.0'

    implementation 'com.google.firebase:firebase-core:17.0.0'

    implementation 'com.google.android.gms:play-services-auth:17.0.0'

    implementation 'com.google.api-client:google-api-client:1.30.1'
    implementation 'com.google.api-client:google-api-client-android:1.30.1'
    implementation 'com.google.apis:google-api-services-drive:v3-rev165-1.25.0'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    compile "androidx.core:core-ktx:1.0.2"
}
